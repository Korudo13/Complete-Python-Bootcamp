'''
Milestone Project 1: Tic-Tac-Toe Game

Requirements: 
    1.  Function: Print out a board. Set up board as list, where index 1-9 corresponds to a number on numpad, to get 3x3 board. (done)
    
    2.  Function: Take in player input and assign their marker as 'X' or 'O'. 
                  Use while loops to continually ask until I get the correct answer.
                  
    3.  Function: Takes (on the board list object) a marker ('X' or 'O') and desired position (1-9) and assigns it to board
    
    4.  Function: Takes in board and mark (X or O) and then checks to see if mark has won
    
    5.  Function: Uses random module to randomly decide which player goes first.
    
    6.  Function: returns boolean indicating whether space on board is freely available
    
    7.  Function: Checks if board is full and returns a boolean. True = full, False = not full
    
    8.  Function: Asks for player's next position (1-9), then uses Step 6's function to check if it's a free position. 
                  If so, return the position for later use.
                  
    9.  Function: Asks player if they want to play again. Returns boolean True if player wants to play again.
    
    10. Use while loops and functions I made to run the game.
    

- 3 by 3 grid (done)
   - basic solution = done
   - Goal: make the grid into a 3x3 list (array)
        - Two Dimensional List
- black background
- white lines
- Player 1 is Blue
- Player 2 is Yellow
- Winner is Green


Each space is a coordinate. Use a multi-dimensional list.
3 rows, 3 columns
'''

from __future__ import print_function
from IPython.display import clear_output

'''
make a mutli-dimensional list (for a coordinates system)
x_player = 'X'
o_player = 'O'

'''
def Draw_Board(board):
    clear_output()
    print(' ' +board[7] + ' | ' + board[8] + ' | ' + board[9])
    print('---|---|---')
    print(' ' +board[4] + ' | ' + board[5] + ' | ' + board[6])
    print('---|---|---')
    print(' ' +board[1] + ' | ' + board[2] + ' | ' + board[3])
    
    board = [0,'X','O','O','X','X','O','O','O','X']


# incomplete

def Player_Input():
    
    marker = ''
    while not(marker == 'O' or marker == 'X'):  # allows any wrong input to continue the loop
        marker = raw_input('Player 1: Do you want to be X or O? ').upper()
        
    if marker == 'X':
        return('X','O')
    
    else:
        return('O','X')


'''
def StartGame():
    print 'Player 1 is: ' + x_player
    print 'Player 2 is: ' + o_player
    
'''

    
def Input_Move():
    player_input = raw_input('Enter a space: ')
    player_move = (
                    {'1':'bottom left space', #change this to print the board with X on the bottom-left
                    '2':'bottom middle space',
                    '3':'bottom right space',
                    '4':'middle left space',
                    '5':'middle middle space',
                    '6':'middle right space',
                    '7':'top left space',
                    '8':'top middle space',
                    '9':'top right space'
                    }
                    )
    
    if player_input == '1':
        print(player_move['1'])
        Draw_Board(player_move['1']) # progress. Now I just need it to print correct board layout.
        
    elif player_input == '2':
        print(player_move['2'])
        Draw_Board(player_move['2'])
        
    elif player_input == '3':
        print(player_move['3'])
        Draw_Board(player_move['3'])
        
    elif player_input == '4':
        print(player_move['4'])
        Draw_Board(player_move['4'])
        
    elif player_input == '5':
        print(player_move['5'])
        Draw_Board(player_move['5'])
        
    elif player_input == '6':
        print(player_move['6'])
        Draw_Board(player_move['6'])
        
    elif player_input == '7':
        print(player_move['7'])
        Draw_Board(player_move['7'])
        
    elif player_input == '8':
        print(player_move['8'])
        Draw_Board(player_move['8'])
        
    elif player_input == '9':
        print(player_move['9'])
        Draw_Board(player_move['9'])
        
    else:
        print('Invalid Move')
        
        
def Game_Won():
    win_combination = ({   # shows the combination of keys for win conditions from a player 
           '789': 'top left horizontal',
           '456':'middle horizontal',
           '123': 'bottom horizontal',
            
            '147': 'left vertical',
            '258': 'middle vertical',
            '369': 'right vertical',
            
            '159': 'diagonal 1',
            '357': 'diagonal 2'
            })
            

def Game_Status_Check():
    # Make a function that checks if the game is won or ongoing       
    
    while game_won or game_tied == false:
        game_ongoing == true

    
    if game_ongoing == true:
        game_won == false
        game_tied == false
        
    elif game_ongoing == false:
        return

