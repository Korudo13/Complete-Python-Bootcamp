'''
Milestone Project 1: Tic-Tac-Toe Game

Requirements: 
    1.  Function: Print out a board. Set up board as list, where index 1-9 corresponds to a number on numpad, to get 3x3 board. (DONE)
    
    2.  Function: Take in player input and assign their marker as 'X' or 'O'. 
                  Use while loops to continually ask until I get the correct answer. (DONE)
                  
    3.  Function: Takes (on the board list object) a marker ('X' or 'O') and desired position (1-9) and assigns it to board (DONE)
    
    4.  Function: Takes in board and mark (X or O) and then checks to see if mark has won (DONE)
    
    5.  Function: Uses random module to randomly decide which player goes first. (DONE)
    
    6.  Function: returns boolean indicating whether space on board is freely available (DONE)
    
    7.  Function: Checks if board is full and returns a boolean. True = full, False = not full (DONE)
    
    8.  Function: Asks for player's next position (1-9), then uses Step 6's function to check if it's a free position. 
                  If so, return the position for later use. (DONE)
                  
    9.  Function: Asks player if they want to play again. Returns boolean True if player wants to play again. (DONE)
    
    10. Use while loops and functions I made to run the game. (DONE)
    

#####  code   ########

from __future__ import print_function
from IPython.display import clear_output

def Print_Board(board):
    clear_output()
    print(' ' +board[7] + ' | ' + board[8] + ' | ' + board[9])
    print('---|---|---')
    print(' ' +board[4] + ' | ' + board[5] + ' | ' + board[6])
    print('---|---|---')
    print(' ' +board[1] + ' | ' + board[2] + ' | ' + board[3])
    
    #board = [0,'X','O','O','X','X','O','O','O','X']

def Player_Input():
    
    marker = ''
    while not(marker == 'O' or marker == 'X'):  # allows any wrong input to continue the loop
        marker = raw_input('Player 1: Do you want to be X or O? ').upper()
        
    if marker == 'X':
        return('X','O')
    
    else:
        return('O','X')
    
# places the marker (X or O) on the board at the correct position based on the NumPad grid.    
def Place_Marker(board, marker, position):
    board[position] = marker

                '''  # Commented-out Legacy Code, left for educational purposes
                
                def Input_Move(): 

                    player_input = raw_input('Make your next move: ')
                    player_move = (
                                    {'1':' X        ' , #There are 10 indeces (0-9). The 'X' in this dictionary correlates to the space on the board
                                     '2':'  X       '  ,
                                     '3':'   X      '  ,
                                     '4':'    X      ' ,
                                     '5':'     X      ',
                                     '6':'      X   '  ,
                                     '7':'       X  '  ,
                                     '8':'        X  ' ,
                                     '9':'         X'
                                    }
                                    )

                    if player_input == '1':
                        Draw_Board(player_move['1']) 

                    elif player_input == '2':
                        Draw_Board(player_move['2'])

                    elif player_input == '3':
                        Draw_Board(player_move['3'])

                    elif player_input == '4':
                        Draw_Board(player_move['4'])

                    elif player_input == '5':
                        Draw_Board(player_move['5'])

                    elif player_input == '6':
                        Draw_Board(player_move['6'])

                    elif player_input == '7':
                        Draw_Board(player_move['7'])

                    elif player_input == '8':
                        Draw_Board(player_move['8'])

                    elif player_input == '9':
                        Draw_Board(player_move['9'])

                    else:
                        print('Invalid Move')
                '''
        
def Victory_Check(board, mark):
  
        # Horizontal Win Combinations
        return ((board[7] == mark and board[8] == mark and board[9] == mark) or
        (board[4] == mark and board[5] == mark and board[6] == mark) or
        (board[1] == mark and board[2] == mark and board[3] == mark) or
        
        # Vertical Win Combinations
        (board[1] == mark and board[4] == mark and board[7] == mark) or
        (board[2] == mark and board[5] == mark and board[8] == mark) or
        (board[3] == mark and board[6] == mark and board[9] == mark) or
        
        # Diagnonal Win Combinations
        (board[1] == mark and board[5] == mark and board[9] == mark) or
        (board[3] == mark and board[5] == mark and board[7] == mark))  
    

def Choose_First_Player():
    import random
    if random.randint(0,1) == 0:
        return 'Player 1'
    else:
        return 'Player 2'
            

def Blank_Space_Check(board, position):
    return board[position] == ' '


def Board_Full_Check(board):
    for i in range(1,10): # checks 1-9, same as board spaces / numpad
        if Blank_Space_Check(board, i): # if true
            return False 
    return True # no 'else' statement because I want to always check 1-9

def Next_Player_Move(board):
    position = ' '
    
    while position not in '1 2 3 4 5 6 7 8 9'.split() or not Blank_Space_Check(board, int(position)):
        position = raw_input('Choose your next position: (Numpad 1-9), then ENTER')
        
    return int(position)

def Replay_Game():
    replay_bool = False
    replay_response = raw_input('Do you want to play again? Enter Yes or No. ')
    
    if replay_response.lower().startswith('y'):  # accounts for "Yes, yes, y, YUP, (etc.)
        replay_bool = True
        print("Let's Play Again!")
        
    elif replay_response.lower().startswith('n'): # accounts for "NO, nope, Not happening, nuh-UH, (etc.)
        replay_bool = False
        print ('Game Over')
        
    else:
        print('invalid answer')
        

print ("Tic Tac Toe! Let's Go!")
    
while True:
    the_board = [' '] * 10
    player1_marker, player2_marker = Player_Input()
    turn = Choose_First_Player()
    print(turn + ' will go first!')
        
    game_on = True
        
    while game_on:
        
        #if raw_input(Escape):
            #game_on = False
        
        if turn == 'Player 1':
            
            Print_Board(the_board)
            position = Next_Player_Move(the_board)
            Place_Marker(the_board, player1_marker, position)
                
            if Victory_Check(the_board, player1_marker):
                Print_Board(the_board)
                print('Congratulations, Player 1 has won the game!')
                game_on = False
                    
            else:
                if Board_Full_Check(the_board):
                    Print_Board(the_board)
                    print ('Draw Game.')
                    break
                else:
                    turn = 'Player 2'
                        
        else:
            # Player 2's turn
            Print_Board(the_board)
            position = Next_Player_Move(the_board)
            Place_Marker(the_board, player2_marker, position)
                
            if Victory_Check(the_board, player2_marker):
                Print_Board(the_board)
                print('Congratulations, Player 2 has won the game!')
                game_on = False
                    
            else:
                if Board_Full_Check(the_board):
                    Print_Board(the_board)
                    print ('Draw Game.')
                    break
                else:
                    turn = 'Player 1'

    if not Replay_Game():
        break
