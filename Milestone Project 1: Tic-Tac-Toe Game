'''
Milestone Project 1: Tic-Tac-Toe Game

Requirements: 
    1.  Function: Print out a board. Set up board as list, where index 1-9 corresponds to a number on numpad, to get 3x3 board. (DONE)
    
    2.  Function: Take in player input and assign their marker as 'X' or 'O'. 
                  Use while loops to continually ask until I get the correct answer. (DONE)
                  
    3.  Function: Takes (on the board list object) a marker ('X' or 'O') and desired position (1-9) and assigns it to board (DONE)
    
    4.  Function: Takes in board and mark (X or O) and then checks to see if mark has won (DONE)
    
    5.  Function: Uses random module to randomly decide which player goes first. (DONE)
    
    6.  Function: returns boolean indicating whether space on board is freely available (DONE)
    
    7.  Function: Checks if board is full and returns a boolean. True = full, False = not full (DONE)
    
    8.  Function: Asks for player's next position (1-9), then uses Step 6's function to check if it's a free position. 
                  If so, return the position for later use. (DONE)
                  
    9.  Function: Asks player if they want to play again. Returns boolean True if player wants to play again.
    
    10. Use while loops and functions I made to run the game.
    

- 3 by 3 grid (done)
   - basic solution = done
   - Goal: make the grid into a 3x3 list (array)
        - Two Dimensional List
- black background
- white lines
- Player 1 is Blue
- Player 2 is Yellow
- Winner is Green


#####  code   ########

from __future__ import print_function
from IPython.display import clear_output

def Draw_Board(board):
    clear_output()
    print(' ' +board[7] + ' | ' + board[8] + ' | ' + board[9])
    print('---|---|---')
    print(' ' +board[4] + ' | ' + board[5] + ' | ' + board[6])
    print('---|---|---')
    print(' ' +board[1] + ' | ' + board[2] + ' | ' + board[3])
    
    board = [0,'X','O','O','X','X','O','O','O','X']

def Player_Input():
    
    marker = ''
    while not(marker == 'O' or marker == 'X'):  # allows any wrong input to continue the loop
        marker = raw_input('Player 1: Do you want to be X or O? ').upper()
        
    if marker == 'X':
        return('X','O')
    
    else:
        return('O','X')
        
        
    
# places the marker (X or O) on the board at the correct position based on the NumPad grid.    
def Place_Marker(board, marker, position):
    board[position] = marker
    
    # Figure out how to translate this into Input_Move()    OR    rework Input_Move() to accept this intention more simply

    
def Input_Move(): # next: make it so either X or O appears in the correct space
    
    player_input = raw_input('Make your next move: ')
    player_move = (
                    {'1':' X        ' , #There are 10 indeces (0-9). The 'X' in this dictionary correlates to the space on the board
                     '2':'  X       '  ,
                     '3':'   X      '  ,
                     '4':'    X      ' ,
                     '5':'     X      ',
                     '6':'      X   '  ,
                     '7':'       X  '  ,
                     '8':'        X  ' ,
                     '9':'         X'
                    }
                    )
    
    if player_input == '1':
        Draw_Board(player_move['1']) ##There are 10 indeces (0-9). The 'X' in this dictionary correlates to the space on the board

    elif player_input == '2':
        Draw_Board(player_move['2'])
        
    elif player_input == '3':
        Draw_Board(player_move['3'])
        
    elif player_input == '4':
        Draw_Board(player_move['4'])
        
    elif player_input == '5':
        Draw_Board(player_move['5'])
        
    elif player_input == '6':
        Draw_Board(player_move['6'])
        
    elif player_input == '7':
        Draw_Board(player_move['7'])
        
    elif player_input == '8':
        Draw_Board(player_move['8'])
        
    elif player_input == '9':
        Draw_Board(player_move['9'])
        
    else:
        print('Invalid Move')
            
          
def Random_Player_Select():
    import random
    if random.randint(0,1) == 0:
        return 'Player 1'
    else:
        return 'Player 2'
        
def Board_Full_Check(board):
    for i in range(1,10): # checks 1-9, same as board spaces / numpad
        if Space_Check(board, i): # if true
            return False # not a full board
    return True # no 'else' statement because I want to always check 1-9
    
def Next_Player_Move():
    position = ' '
    
    while position not in '1 2 3 4 5 6 6 8 9'.split() or Space_Check(board, int(position)):
        position = raw_input('Choose your next position: (1-9)')
        
    return int(position)

def Game_Status_Check():
    # Make a function that checks if the game is won or ongoing       
    
    while game_won or game_tied == false:
        game_ongoing == true

    if game_ongoing == true:
        game_won == false
        game_tied == false
        
    elif game_ongoing == false:
        return
        
        
